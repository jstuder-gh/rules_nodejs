""""Fetches needed to run the typescript compiler

This method fetches typescript directly, rather than via the npm install of a @bazel/typescript package
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# TODO(alexeagle): we could setup a GH Actions automation to continuously mirror this from upstream
#
_TS_CHECKSUMS = {
    "4.3.5": "c7be550da858be7abfc73dd0b9060ab23ce835ae3b05931f4500a25c09766d45",
    "4.4.4": "7524841bbf63777fef1fe6e1a826026b1dd4849f54f5affa481502faab2cdb16",
    "4.5.4": "5b2b014c4d6f9ad4615d7ced8cc32f882a4a96df8213722577b42277afb03cba",
}

# Namespace this so it's unlikely to conflict with other repositories
_default_name = "bbrnj_typescript"

def ts_repositories(
        ts_version,
        name = _default_name,
        sha256 = None,
        url = "https://registry.npmjs.org/typescript/-/typescript-{version}.tgz"):
    """Fetch a typescript package from npm

    Args:
        name: name of the resulting external repository.
            If you override the name, you'll also have to override the `tsc` attr of `ts_project`.

        ts_version: Version of the typescript package.
            See https://www.npmjs.com/package/typescript?activeTab=versions
            To avoid surprising behavior, you should assert that this matches what your package.json
            installs for non-Bazel tooling such as the editor.

        sha256: integrity hash of the typescript package, computed by running:
            `curl --silent https://registry.npmjs.org/typescript/-/typescript-[version].tgz | shasum -a 256`

        url: where the bazel downloader should fetch the package from, allows a `{version}` placeholder.
    """

    if not sha256:
        sha256 = _TS_CHECKSUMS[ts_version]
    if not sha256:
        fail("No sha256 available for version %s, please set the sha256 attribute" % ts_version)

    http_archive(
        name = name,
        build_file_content = """# Generated by /ts/repositories.bzl
load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary")
load("@rules_nodejs//third_party/github.com/bazelbuild/bazel-skylib:rules/copy_file.bzl", "copy_file")
load("@bazel_skylib//rules:write_file.bzl", "write_file")

# Turn a source directory into a TreeArtifact for RBE-compat
copy_file(
    name = "{name}",
    src = "package",
    # This attribute comes from rules_nodejs patch of
    # https://github.com/bazelbuild/bazel-skylib/pull/323
    is_directory = True,
    out = "package",
    visibility = ["//visibility:public"],
)

write_file(
    name = "gen_tsc.js",
    out = "tsc.js",
    content = [
        "const runfiles = require(process.env['BAZEL_NODE_RUNFILES_HELPER'])",
        "require(runfiles.resolve('{name}') + '/package/bin/tsc')",
    ],
)

nodejs_binary(
    name = "tsc",
    data = ["@{name}"],
    entry_point = "tsc.js",
    visibility = ["//visibility:public"],
)
""".format(name = name, version = ts_version),
        sha256 = sha256,
        urls = [url.format(version = ts_version)],
    )
